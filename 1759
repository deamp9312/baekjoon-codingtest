package main.main2;

import java.util.*;

public class Main {
    static StringBuilder sb = new StringBuilder();
    static int[] arr, arr2;
    static String[] str, str2;
    static boolean[] bool;
    static int l, c;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        //최소 한 개의 모음(a, e, i, o, u)과 최소 두 개의 자음으로 구성

        l = sc.nextInt(); //암호갯수
        c = sc.nextInt();   //암호후보 갯수

        str = new String[c];
        str2 = new String[l];
        bool = new boolean[c];

        sc.nextLine();
        for (int i = 0; i < c; i++) {
            str[i] = sc.next();
        }
        Arrays.sort(str);


        back(0, 0);

        System.out.println(sb);


    }

    public static void back(int a, int depth) {
        if (depth == l) {
            boolean check = false;
            int count = 0;
            for (int i = 0; i < bool.length; i++) {
                if (bool[i]) {
                    count += 1;
                    check = true;
                    continue;
                }
            }
            if (l-count>=2) {
                for (int i = 0; i < str2.length; i++) {
                    if (check) {
                        sb.append(str2[i]);
                    } else {
                        break;
                    }

                    if (i == str2.length - 1)
                        sb.append('\n');
                }
            }


            return;
        }//lc

        for (int i = a; i < c; i++) {


            str2[depth] = str[i];

//            System.out.println("str2[depth] = " + str2[depth]);

            if (str2[depth].contains("a")) {
                bool[i] = true;
            } else if (str2[depth].contains("e")) {
                bool[i] = true;
            } else if (str2[depth].contains("i")) {
                bool[i] = true;
            } else if (str2[depth].contains("o")) {
                bool[i] = true;
            } else if (str2[depth].contains("u")) {
                bool[i] = true;
            }

            back(i + 1, depth + 1);

            bool[i] = false;
        }


    }

}




